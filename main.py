import os
import json
import time
from video import LyricsFetcher, AudioFetcher, ImageMaker, VideoMakerV2
from music_choose import choose_random_track
from cover_get import download_cover
from post import TikTokPoster, get_tiktok_auth_url

# S√©lection al√©atoire d'une musique
print("üé≤ S√©lection al√©atoire d'une musique...")

# Nouvelle boucle pour s'assurer d'avoir des paroles
max_attempts = 25
attempt = 0
lyrics_found = False

while attempt < max_attempts and not lyrics_found:
    track_info = choose_random_track()

    if track_info is None:
        print("‚ùå Impossible de s√©lectionner une musique. Arr√™t du programme.")
        exit()

    artist_name = track_info['artist']
    song_title = track_info['title']
    isrc = track_info['isrc']

    print(f"üéµ Musique s√©lectionn√©e : {artist_name} - {song_title}")
    print(f"üîó Lien Deezer : {track_info['deezer_link']}")

    # R√©cup√©ration et t√©l√©chargement de la cover Deezer
    print("üé® T√©l√©chargement de la cover depuis Deezer...")

    animated_cover_path = None
    static_cover_path = None

    try:
        static_cover_path = download_cover(track_info['deezer_link'], artwork_type='square', loops=1, audio=False)
        if static_cover_path:
            print(f"‚úÖ Cover t√©l√©charg√©e : {static_cover_path}")
        else:
            print("‚ö†Ô∏è Pas de cover disponible pour ce morceau sur Deezer")
    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement de la cover : {e}")

    folder_name = f"{artist_name} - {song_title}"

    # Cr√©ation du dossier si n√©cessaire
    if not os.path.exists(folder_name):
        os.mkdir(folder_name)

    os.chdir(folder_name)

    print(f"üìÅ Dossier de travail : {folder_name}")
    print(f"üé¨ Cr√©ation de la vid√©o pour {artist_name} - {song_title}...")

    try:
        print("üìù R√©cup√©ration des paroles...")
        lyrics_fetcher = LyricsFetcher(artist_name, song_title)
        lyrics = lyrics_fetcher.fetch_lyrics()
        if lyrics is None:
            print("‚ùå Pas de paroles trouv√©es pour ce morceau. On change de musique...")
            os.chdir("..")
            # Nettoyer le dossier cr√©√© si vide
            if not os.listdir(folder_name):
                os.rmdir(folder_name)
            attempt += 1
            continue
        print("‚úÖ Paroles r√©cup√©r√©es!")
        lyrics_found = True
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des paroles : {e}")
        os.chdir("..")
        if not os.listdir(folder_name):
            os.rmdir(folder_name)
        attempt += 1
        continue

# Si aucune musique avec paroles n'a √©t√© trouv√©e
if not lyrics_found:
    print("‚ùå Impossible de trouver une musique avec des paroles apr√®s plusieurs tentatives. Arr√™t du programme.")
    exit()

# Le reste du code ne s'ex√©cute que si des paroles ont √©t√© trouv√©es
print("üéµ R√©cup√©ration de l'audio...")
# R√©cup√©ration de la cl√© API YouTube depuis les variables d'environnement
YOUTUBE_API_KEY = os.environ.get("YOUTUBE_API_KEY")
audio_fetcher = AudioFetcher(youtube_api_key=YOUTUBE_API_KEY)
audio_fetcher.fetch_audio(artist_name, song_title)
print("‚úÖ Audio r√©cup√©r√©!")

# Utilisation du BPM Deezer si disponible, sinon calcul √† partir de l'audio
def get_valid_bpm(track_info, audio_fetcher, default_bpm=120.0):
    """
    Tente d'obtenir le BPM Deezer, sinon le BPM audio, sinon retourne le BPM par d√©faut.
    """
    def safe_float(val):
        try:
            return float(val)
        except (TypeError, ValueError):
            return None
    bpm = safe_float(track_info.get("bpm"))
    if bpm and bpm > 0:
        print(f"ü•Å BPM r√©cup√©r√© depuis Deezer : {bpm}")
        return bpm
    print("üîé Calcul du BPM √† partir de l'audio...")
    bpm = audio_fetcher.get_bpm_from_audio()
    if bpm and bpm > 0:
        print(f"ü•Å BPM calcul√© √† partir de l'audio : {bpm}")
        return bpm
    print(f"‚ö†Ô∏è BPM non trouv√© ou invalide, valeur par d√©faut utilis√©e ({default_bpm}).")
    return default_bpm

bpm = get_valid_bpm(track_info, audio_fetcher)

print("üñºÔ∏è Cr√©ation des images...")
images_maker = ImageMaker(lyrics_fetcher.get_lyrics())
if static_cover_path:
    images_maker.animated_cover_path = static_cover_path  # On utilise la cover statique comme image principale
images_maker.make_images()
# Ajout : cr√©ation de la carte de titre moderne
images_maker.create_title_card(artist_name, song_title)
print("‚úÖ Images cr√©√©es!")

print("üé¨ Cr√©ation de la vid√©o...")
# Passer les informations du morceau au VideoMaker
video_maker = VideoMakerV2(
    folder=images_maker.folder, 
    bpm=bpm,
    artist_name=artist_name,
    song_title=song_title,
    cover_path=static_cover_path  # Utiliser la cover statique pour le header
)

# Cr√©er la vid√©o compl√®te
try:
    final_video = video_maker.create_complete_video()
except Exception as e:
    print(f"‚ùå Erreur lors de la cr√©ation de la vid√©o avec BPM {bpm} : {e}")
    if bpm != 120.0:
        print("üîÅ Nouvelle tentative avec le BPM par d√©faut (120)...")
        video_maker = VideoMakerV2(
            folder=images_maker.folder,
            bpm=120.0,
            artist_name=artist_name,
            song_title=song_title,
            cover_path=static_cover_path
        )
        final_video = video_maker.create_complete_video()
    else:
        raise

print(f"üéâ Vid√©o termin√©e pour : {artist_name} - {song_title}")
print(f"üìπ Fichier vid√©o : {final_video}")

client_key = os.environ.get("TIKTOK_CLIENT_KEY", "sbawtqg84z43tqt1cv")
client_secret = os.environ.get("TIKTOK_CLIENT_SECRET", "HkavHcbJQBcJgobVIU998XODCOJyq5z3")
redirect_uri = os.environ.get("TIKTOK_REDIRECT_URI", "https://singer.lenylvt.cc/")
token_path = "../tiktok_tokens.txt" if not os.path.exists("tiktok_tokens.txt") else "tiktok_tokens.txt"

def save_tokens(token_data, path=token_path):
    token_data["saved_at"] = int(time.time())
    with open(path, "w") as f:
        json.dump(token_data, f)

def load_tokens(path=None):
    if path is None:
        project_root = get_project_root()
        path = os.path.join(project_root, "tiktok_tokens.txt")
    if not os.path.exists(path):
        return None
    with open(path) as f:
        return json.load(f)

def is_token_expired(token_data):
    now = int(time.time())
    expires_in = int(token_data.get("expires_in", 0))
    saved_at = int(token_data.get("saved_at", 0))
    return now > saved_at + expires_in - 60  # marge de 1 min

def get_project_root():
    """Retourne le chemin absolu de la racine du projet (l√† o√π se trouve main.py)."""
    return os.path.dirname(os.path.abspath(__file__))

def create_token_file_from_env():
    token_json = os.environ.get("TIKTOK_TOKEN_JSON")
    token_str = os.environ.get("TIKTOK_TOKEN")
    project_root = get_project_root()
    token_file_path = os.path.join(project_root, "tiktok_tokens.txt")
    if token_json:
        try:
            data = json.loads(token_json)
            with open(token_file_path, "w") as f:
                json.dump(data, f)
            print(f"‚úÖ Fichier tiktok_tokens.txt cr√©√© depuis la variable d'environnement TIKTOK_TOKEN_JSON √† : {token_file_path}")
            return
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation de tiktok_tokens.txt depuis TIKTOK_TOKEN_JSON : {e}")
    if token_str:
        try:
            # Si c'est un JSON, on le charge, sinon on consid√®re que c'est juste l'access_token
            try:
                data = json.loads(token_str)
            except json.JSONDecodeError:
                # Juste un access_token brut
                data = {"access_token": token_str}
            with open(token_file_path, "w") as f:
                json.dump(data, f)
            print(f"‚úÖ Fichier tiktok_tokens.txt cr√©√© depuis la variable d'environnement TIKTOK_TOKEN √† : {token_file_path}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation de tiktok_tokens.txt depuis TIKTOK_TOKEN : {e}")

# Appel du script utilitaire au d√©marrage
create_token_file_from_env()

# === Authentification TikTok (OAuth2) ===
token_data = load_tokens()
if not token_data:
    print("üîë Aucun token TikTok trouv√©. Veuillez coller le code d'autorisation TikTok (apr√®s connexion via Login Kit) :")
    print("üëâ Lien d'autorisation TikTok :")
    print(get_tiktok_auth_url())
    code = input("Code : ").strip()
    try:
        print("‚è≥ √âchange du code contre un access_token...")
        token_data = TikTokPoster.exchange_code_for_token(
            client_key=client_key,
            client_secret=client_secret,
            code=code,
            redirect_uri=redirect_uri
        )
        save_tokens(token_data)
        print("‚úÖ Token TikTok sauvegard√© dans tiktok_tokens.txt")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'√©change du code TikTok : {e}")
        exit(1)
else:
    # V√©rifie si le token est expir√© et rafra√Æchis-le si besoin
    if is_token_expired(token_data):
        print("üîÑ Token TikTok expir√©, rafra√Æchissement en cours...")
        try:
            refreshed = TikTokPoster.refresh_access_token(
                client_key=client_key,
                client_secret=client_secret,
                refresh_token=token_data["refresh_token"]
            )
            save_tokens(refreshed)
            token_data = refreshed
            print("‚úÖ Token TikTok rafra√Æchi.")
        except Exception as e:
            print(f"‚ùå Erreur lors du rafra√Æchissement du token TikTok : {e}")
            exit(1)

access_token = token_data["access_token"]
tiktok = TikTokPoster(access_token)
try:
    print("üîç R√©cup√©ration des infos du cr√©ateur TikTok...")
    creator_info = tiktok.query_creator_info()
    print(f"üë§ Utilisateur TikTok : {creator_info.get('data', {}).get('creator_username', 'inconnu')}")
    print("üöÄ Initialisation de l'upload vid√©o (direct post) sur TikTok...")
    init_resp = tiktok.init_video_upload_inbox(final_video)
    upload_url = init_resp["data"]["upload_url"]
    publish_id = init_resp["data"]["publish_id"]
    print("‚¨ÜÔ∏è Upload de la vid√©o en cours...")
    tiktok.upload_video_file(upload_url, final_video)
    print("‚è≥ V√©rification du statut de la publication...")
    status = tiktok.fetch_post_status(publish_id)
    print(f"üì¢ Statut de la publication : {status}")
except Exception as e:
    print(f"‚ùå Erreur lors de la publication TikTok : {e}")
    if hasattr(e, 'response') and e.response is not None:
        print("R√©ponse TikTok :", e.response.text)